name: CI

on:
  push:
  schedule:
    - cron:  '1 0 * * 1'    # * is a special character in YAML, therefore this string needs to be quoted

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macOS-latest]
      fail-fast: false

    env:
      DOTNET_CLI_TELEMETRY_OPTOUT: 1
      ARTIFACT_DIR: ./Artifacts
      PROJECT_NAME: DotnetCombine

    steps:
    - uses: actions/checkout@v2.3.3

    - name: Inject slug/short variables
      uses: rlespinasse/github-slug-action@v3.x

    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1.7.2
      with:
        dotnet-version: 5.0.100

    - name: Cache SonarCloud packages
      uses: actions/cache@v1
      if: matrix.os == 'windows-latest'
      with:
        path: ~\sonar\cache
        key: ${{ runner.os }}-sonar
        restore-keys: ${{ runner.os }}-sonar

    - name: Cache SonarCloud scanner
      id: cache-sonar-scanner
      if: matrix.os == 'windows-latest'
      uses: actions/cache@v1
      with:
        path: .\.sonar\scanner
        key: ${{ runner.os }}-sonar-scanner
        restore-keys: ${{ runner.os }}-sonar-scanner

    - name: Install SonarCloud scanner
      if: matrix.os == 'windows-latest' && steps.cache-sonar-scanner.outputs.cache-hit != 'true'
      shell: powershell
      run: |
        New-Item -Path .\.sonar\scanner -ItemType Directory
        dotnet tool update dotnet-sonarscanner --tool-path .\.sonar\scanner

    - name: Prepare sonar Analysis
      if: matrix.os == 'windows-latest'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: powershell
      run: |
        .\.sonar\scanner\dotnet-sonarscanner begin /k:"${{ env.PROJECT_NAME }}" /o:"eduherminio-github" /d:sonar.login="${{ secrets.SONAR_TOKEN }}" /d:sonar.host.url="https://sonarcloud.io" /d:sonar.coverageReportPaths="coveragereport/SonarQube.xml"

    - name: '[Ubuntu] Set version to -ci-${{ github.run_number }}'
      if: matrix.os == 'ubuntu-latest'
      shell: pwsh
      run: |
        $input_path = "Directory.Build.props"
        $regex = "(?<=<Version>).*(?=</Version>)"
        (Get-Content $input_path) -Replace $regex, '$0-ci-${{ github.run_number }}' | Out-File $input_path

    - name: Build
      run: dotnet build -c Release /p:DeterministicBuild=true

    - name: Run tests
      run: dotnet test -c Release --no-build --collect:"XPlat Code Coverage"

    - name: '[Ubuntu] Pack'
      if: matrix.os == 'ubuntu-latest'
      run: |
        dotnet pack -c Release --no-build src/${{ env.PROJECT_NAME }}/${{ env.PROJECT_NAME }}.csproj --include-symbols -o ${{ env.ARTIFACT_DIR }}

    - name: '[Ubuntu] Upload Artifact'
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PROJECT_NAME }}-ci-${{ github.run_number }}
        path: |
          ${{ env.ARTIFACT_DIR }}/*.nupkg
          ${{ env.ARTIFACT_DIR }}/*.snupkg
        if-no-files-found: error

    - name: '[Ubuntu] Generate test coverage report'
      uses: danielpalme/ReportGenerator-GitHub-Action@4.8.1
      with:
        reports: 'tests/**/*.cobertura.xml'
        targetdir: 'coveragereport'
        reporttypes: 'HtmlInline_AzurePipelines_Dark;SonarQube'
        assemblyfilters: '+*'
        classfilters: '+*'
        filefilters: '+*'
        verbosity: 'Info'
        title: '${{ env.PROJECT_NAME }} #${{ github.run_number }} (${{ env.GITHUB_REF_SLUG }})'
        tag: '${{ github.run_number }}_${{ github.run_id }}'
        customSettings: 'numberOfReportsParsedInParallel=3;numberOfReportsMergedInParallel=3'

    - name: '[Ubuntu] Upload test coverage report'
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v2
      with:
        name: ${{ env.PROJECT_NAME }}-coverage-ci-${{ github.run_number }}
        path: coveragereport/
        if-no-files-found: error

    - name: Perform Sonar analysis
      if: matrix.os == 'windows-latest'
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      shell: powershell
      run: |
        .\.sonar\scanner\dotnet-sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"